{"version":3,"sources":["assets/images/logo.png","assets/images/display_pic.jpg","components/AppHeader.js","components/AppDashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeader","className","src","require","AppDashboard","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,0GCqB5BC,MAlBf,WACE,OACE,gCACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,EAAQ,OAEpB,yBAAKF,UAAU,mBACb,uBAAGA,UAAU,qBACb,uBAAGA,UAAU,oBACX,0BAAMA,UAAU,sBAAhB,MAEF,yBAAKA,UAAU,OAAOC,IAAKC,EAAQ,MACnC,uBAAGF,UAAU,uB,MCwBNG,MApCf,WACE,OACE,yBAAKH,UAAU,aACb,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,kCACb,uBAAGA,UAAU,iBACb,0BAAMA,UAAU,eACd,yBAAKA,UAAU,UAAf,gBACA,yBAAKA,UAAU,QAAf,mBAGJ,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,yBACb,0BAAMA,UAAU,eACd,yBAAKA,UAAU,UAAf,OACA,yBAAKA,UAAU,QAAf,mBAGJ,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,qBACb,0BAAMA,UAAU,eACd,yBAAKA,UAAU,UAAf,SACA,yBAAKA,UAAU,QAAf,gBAGJ,yBAAKA,UAAU,2BACb,uBAAGA,UAAU,eACb,0BAAMA,UAAU,eACd,yBAAKA,UAAU,UAAf,QACA,yBAAKA,UAAU,QAAf,cCfKI,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a268254f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.18a643fb.png\";","module.exports = __webpack_public_path__ + \"static/media/display_pic.622cbf0d.jpg\";","import React from 'react';\r\nimport '../assets/css/AppHeader.css';\r\n\r\nfunction AppHeader() {\r\n  return (\r\n    <header>\r\n      <div className=\"logo\">\r\n        <img src={require('../assets/images/logo.png')} />\r\n      </div>\r\n      <nav className=\"main-navigation\">\r\n        <i className=\"fas fa-bars item\" />\r\n        <i className=\"far fa-bell item\">\r\n          <span className=\"notification-count\">8</span>\r\n        </i>\r\n        <img className=\"item\" src={require('../assets/images/display_pic.jpg')} />\r\n        <i className=\"fas fa-cog item\" />\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport '../assets/css/AppDashboard.css';\r\n\r\nfunction AppDashboard() {\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"title\">Dashboard</div>\r\n      <div className=\"dashboard-widget total-revenue\">\r\n        <i className=\"far fa-heart\"></i>\r\n        <span className=\"widget-data\">\r\n          <div className=\"amount\">Php 980, 000</div>\r\n          <div className=\"type\">Total Revenue</div>\r\n        </span>\r\n      </div>\r\n      <div className=\"dashboard-widget sales\">\r\n        <i className=\"fas fa-shopping-cart\"></i>\r\n        <span className=\"widget-data\">\r\n          <div className=\"amount\">765</div>\r\n          <div className=\"type\">Today's Sales</div>\r\n        </span>\r\n      </div>\r\n      <div className=\"dashboard-widget conversion\">\r\n        <i className=\"far fa-chart-bar\"></i>\r\n        <span className=\"widget-data\">\r\n          <div className=\"amount\">0.50%</div>\r\n          <div className=\"type\">Conversion</div>\r\n        </span>\r\n      </div>\r\n      <div className=\"dashboard-widget visits\">\r\n        <i className=\"far fa-eye\"></i>\r\n        <span className=\"widget-data\">\r\n          <div className=\"amount\">6738</div>\r\n          <div className=\"type\">Visits</div>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppDashboard;\r\n","import React from 'react';\nimport './assets/css/App.css';\n\nimport AppHeader from './components/AppHeader';\nimport AppDashboard from './components/AppDashboard';\n\nfunction App() {\n  return (\n    <div>\n      <AppHeader />\n      <main>\n        <AppDashboard />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}